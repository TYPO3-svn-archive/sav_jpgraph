<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<T3locallang>
	<meta type="array">
		<type>CSH</type>
		<csh_table>sav_jpgraph</csh_table>
		<description>Default TCA_DESCR for the extension SAV JpGraph</description>
	</meta>
	<data type="array">
		<languageKey index="default" type="array">
			<label index=".description">SAV JpGraph</label>
      <label index=".details">
      </label>
			<label index="help.description">SAV Filter Selectors Extension</label>
			<label index="help.details">
			This plugin build selectors, checkboxes ... from fields in table. It can be easily used with the "SAV Library" extension.

      . &lt;b&gt;CSS File:&lt;/b&gt;
      CSS file to be used in replacement of the default CSS file.

      &lt;b&gt;Template:&lt;/b&gt;			
			The plugin works with a template you have to enter in the field as follows:
			&lt; ul &gt;
			  &lt; li &gt; .... &lt; /li &gt;
			  &lt; li &gt; .... &lt; /li &gt;
			&lt; /ul &gt;
			
			Inside the &lt; li &gt; tags, you can add tags to generate selectors, checkboxes, buttons, search fields, ....
			
			. &lt;b&gt;&lt; label for="Field" &gt;Title&lt; /label &gt;###select[Table.Field]###&lt;/b&gt;
			It generates a selector for the field "Field" from table "Table". The tag label is associated with the selector.

			An alias should be used if the TCA type associated with the field is not "selectorbox". The alias should be a sql expression. The following example builds a selector for country from a field whose type is "text".
			###select[tx_myext.country as tx_myext.country]###			
			
			The tag "selectDistinct" can be used to generate a selector with distinct values. The following example generates a selector box associated with university years :
			###selectdistinct[tx_myext.year as 
      if(date_end &gt;= unix_timestamp(concat(year(from_unixtime( date_end )),"-10-01")),
        concat(year(from_unixtime( date_end )),"-",year(from_unixtime( date_end ))+1),
        concat(year(from_unixtime( date_end))-1,"-",year(from_unixtime( date_end )))
      )]###
      
      An "order by" clause can be added to order the items.
      
      If tags "selectSearchAll" or "selectDistinctSearchAll" are used then the WHERE clause of the query created with the SAV Library Generator is overloaded.

			. &lt;b&gt;&lt; label for="Field" &gt;Title&lt; /label &gt;###selectFromQuery[(query) as Field]###&lt;/b&gt;
			It generates a selector from the query. The query should use an alias "label" for the information associated with the selector. An alias "uid" may be also used.
      It will providethe value  associated with the selected item.
      You may add a where clause after the "Field" that will be propagated to extension build with the SAV Library Extension Generator.
      If "tag" is an alias, ###tag### are allowed in the where clause and will be replacede by their value.
			An order clause may also be used.
			
      . &lt;b&gt;###button[search]###&lt;/b&gt;
      It generates a search button.

      . &lt;b&gt;&lt; label for="Name" &gt;Title&lt; /label &gt;###search[Table.Name as Table.Field1, Table.Field2]###&lt;/b&gt;
			It generates a search box. Search is done in fields "Field1" or "Field2" of the table "Table". The tag label is associated with the search box.
      If the tag "searchAll" is used then the WHERE clause of the query created with the SAV Library Generator is overloaded.

      . &lt;b&gt;###calendar[Table as Table.FieldTitle order by Table.FieldDate]###&lt;/b&gt;
      It generates a mini calendar from the table "Table" using the field "FieldDate". The field "FieldTitle" is used to display the message associated with each item.

      . &lt;b&gt;###check[Table.Field]###&lt;/b&gt;
			It generates checkboxes for the field "Field" of the table "Table".
			Sometimes, it may be useful to have several fields with checkboxes. By default, fields are "ANDed" in the WHERE Clause. If you want to have the fields "ORed" you have to use
			###checkBeginGroup[Table.firstField]### for the first field and ###checkEndGroup[Table.lastField]### for the last field. If you have intermediate fields, just use ###check[Table.Field]###.

      . &lt;b&gt;###radiolist[string as WHERE_CLAUSE]###&lt;/b&gt;
			It generates a "radio button". If it is selected, the WHERE_CLAUSE will be added.

      . &lt;b&gt;###where[WHERE_CLAUSE]###&lt;/b&gt;
			The WHERE_CLAUSE will be added. No output is generated. 
			
			&lt;b&gt;Language:&lt;/b&gt;
			The language section can be used to define local translation of keywords associated with the selectors, checkboxes, .... Language metatags must be defined in the template as follows:
			$$$label1$$$ where label1 is the a keyword to be defined in this section (see the default configuration).

      &lt;b&gt;Storage page list:&lt;/b&gt;
      List of the pages where information are searched. By default the page where the plugin is inserted is taken into account.
      </label>
    </languageKey>
		
		<languageKey index="fr" type="array">
			<label index=".description">SAV Filter Selectors</label>
			<label index=".details">
      </label>
			<label index="help.description">Extension SAV Filtre Selecteurs</label>
			<label index="help.details">
			Ce plugin permet de construire simplement des sélecteurs à utiliser avec les extensions engendrées par "SAV Library".
			
      &lt;b&gt;Template :&lt;/b&gt;			
			Le principe consiste à définir un template sous la forme d'une liste &lt;ul&gt;
			&lt; ul &gt;
			  &lt; li &gt; .... &lt; /li &gt;
			  &lt; li &gt; .... &lt; /li &gt;
			&lt; /ul &gt;
			
			Dans les balises &lt;li&gt; on peut placer des metatags pour engendrer listes, checkbox, boutons, champs de recherche.
			
      . &lt;b&gt;Fichier CSS File :&lt;/b&gt;
      Fichier CSS à utiliser en remplacement du fichier par défaut.

			. &lt;b&gt;&lt; label for="Champ" &gt;Titre&lt; /label &gt;###select[Table.Champ]###&lt;/b&gt;
			engendre un sélecteur pour le champ "Champ" de la table "Table". La balise label est liée au sélecteur.

			Un alias doit être utilisé si le champ n'est pas de type "selectorbox". L'alias est une expression sql valide. L'exemple suivant construit un sélecteur des pays à partir d'un champ de type texte.
			###select[tx_myext.pays as tx_myext.pays]###			
			
			En utilisant "selectDistinct", on engendre une liste avec des valeurs distinctes. L'exemple suivant crée un sélecteur avec la date sous forme d'année universitaire :
			###selectdistinct[myext.year as 
      if(date_fin &gt;= unix_timestamp(concat(year(from_unixtime( date_fin )),"-10-01")),
        concat(year(from_unixtime( date_fin )),"-",year(from_unixtime( date_fin ))+1),
        concat(year(from_unixtime( date_fin))-1,"-",year(from_unixtime( date_fin )))
      )]###
			
      Une clause "order by" peut être ajoutée pour ordonner les items.
      
      Si les tags "selectSearchAll" or "selectDistinctSearchAll" sont utilisés alors la clause WHERE de la requête de l'extension créée avec SAV Library est surchargée.

			. &lt;b&gt;&lt; label for="Field" &gt;Title&lt; /label &gt;###selectFromQuery[(query) as Field]###&lt;/b&gt;
			engendre un sélecteur à partir de la requête. La requête doit comporter un alias "label" pour les informations associées au sélecteur. Un alias "uid" peut aussi être utilisé.
      Il fournira la valeur associée avec l'item sélectionné. Vous pouvez ajouter une clause were après "Field". Elle sera propagée vers les extensions contruites à l'aide de SAV Library Extension Generator.
      Si "tag" est un alias, ###tag### est autorisé dans la clause where et sera remplacé par sa valeur.
			Un clause order peut être aussi utilisée et sera propagée.


      . &lt;b&gt;###button[search]###&lt;/b&gt;
      engendre un bouton de recherche.

      . &lt;b&gt;&lt; label for="Name" &gt;Titre&lt; /label &gt;###search[Table.Name as Table.Champ1, Table.Champ2]###&lt;/b&gt;
			engendre un champ de recherche dans les champs "Champ1" ou "Champ2" de la table "Table". La balise label est liée à la boîte de recherche.
      Si le tag "searchAll" est utilisé alors la clause WHERE de la requête de l'extension créée avec SAV Library est surchargée.

      . &lt;b&gt;###check[Table.Champ]###&lt;/b&gt;
			engendre les "checkbox" du champ "Champ" de la table "Table".
			Quelquefois, il est utile d'avoir plusieurs champs avec des "checkbox". Par défaut les champs sont liés par un "AND" dans la clause WHERE. Pour lier les champs par un "OR", il faut utiliser la syntaxe
			###checkBeginGroup[Table.firstField]### pour le premier champ et ###checkEndGroup[Table.lastField]### pour le dernier. S'il y a des champs intermédiaires, utiliser simplement ###check[Table.Field]###.

      . &lt;b&gt;###radiolist[string as WHERE_CLAUSE]###&lt;/b&gt;
			engendre un "radio button" qui, s'il est activé, provoquera l'ajout de la clause WHERE_CLAUSE.

      . &lt;b&gt;###where[WHERE_CLAUSE]###&lt;/b&gt;
			La clause WHERE_CLAUSE sera ajoutée. Aucune sortie n'est générée. 
			
			&lt;b&gt;Language :&lt;/b&gt;
			La section "Langae" sert à définir les traductions locales des mots-clés associés aux sélecteurs, checkbox, ... La syntaxe des "metatags" à placer dans le template doit être la suivante :
			$$$label1$$$ où label1 est un mot-clé à définir dans cette section (cf. la configuration par défaut).
			
      &lt;b&gt;Liste des pages de stockage :&lt;/b&gt;
      Liste des pages dans lesquelles l'information est cherchée. Par défaut, la page dans laquelle le plugin est inséré est prise en considération.

      </label>
		</languageKey>
	</data>
</T3locallang>
